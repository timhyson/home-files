# Ctrl-Space prefix key. Default => C-b. Send C-Space with repeat option via C-Space C-Space
unbind-key C-b
set -g prefix C-Space
bind-key -r C-Space send-prefix

# Reload tmux.conf with prefix-r
bind C-r source-file ~/.tmux.conf \; display "~/.tmux.conf reloaded"

# start window numbering at 1 (default => 0)
set -g base-index 1
set-window-option -g pane-base-index 1

# set -g clock-mode-style 24

# renumber windows sequentially after removing one
set -g renumber-windows on

#set-option -g default-shell /bin/zsh

# improve colors by using 256 colors
set -g default-terminal 'xterm-256color'

# Set the term environment variable when using tmux
set -g default-terminal "screen-256color"

# Change cursor in vim to distinguish between insert and command mode.  Use in conjunction with tmux-cursors.vim
#set-option -g terminal-overrides '*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\E]52;%p1%s;%p2%s\007:Cc=\E]12;%p1%s\007:Cr=\E]112\007:Cs=\E]50;CursorShape=%?%p1%{3}%<%t%{0}%e%p1%{2}%-%;%d\007'

# Make Vim responsive to esc. Allows for faster key repetition
set -s escape-time 0

# increase scrollback lines
set -g history-limit 10000

# Enable mouse support (works in iTerm)
set -g mouse on
#set-window-option -g mode-mouse
#set-option -g mouse-select-pane on
#set-option -g mouse-resize-pane on
#set-option -g mouse-select-window on

# rm mouse mode fail
#set -g mode-mouse off

# I always miss this binding
bind C-[ copy-mode

bind D split-window -h -c ~/code/dotfiles "reattach-to-user-namespace vim +CtrlP"

# Use emacs / readline key-bindings at the tmux command prompt `<prefix>:`
set -g status-keys emacs

# Act like vim
#set -g mode-keys "emacs"


###################
#
# Copy and Paste
#
###################

# Use vim keybindings in copy mode
setw -g mode-keys vi
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Use C-a v to paste the tmux buffer
#bind v paste-buffer

# update default binding of 'Enter' to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

unbind -t vi-copy Space
bind -t vi-copy Space jump-again
bind-key -t vi-copy 0 back-to-indentation

bind y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '
bind C-y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '

# Provide access to the clipboard for pbpaste, pbcopy http://goo.gl/DN82E
set-option -g default-command "reattach-to-user-namespace -l zsh"
set-option -g status-bg colour235 #base02
set-option -g status-fg colour136 #yellow
set-option -g status-attr default


###################
#
# Panes
#
###################

# Smart pane switching with awareness of vim splits
# See this blog post for additional detail:
# http://robots.thoughtbot.com/post/53022241323/seamlessly-navigate-vim-and-tmux-splits
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Secondary binding for C-l to retain redraw
bind C-l send-keys 'C-l'

# Easy rotating of panes
bind C-k swap-pane -U

bind-key T new-window -n 'tagwatch' -d 'echo tagwatching && tagwatch -v'

# Create a new session from fuzzy project list
bind C-t split-window -v "source ~/.zshrc && tm-select-session"

# Show pane numbers for half a second
set -g display-panes-time 300

# Pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange

# Binding to toggle synchronize panes
is_synched='[[ $(tmux show-window-options -v synchronize-panes) == "on" ]]'
bind-key S if-shell "$is_synched" "set-window-option synchronize-panes off" "set-window-option synchronize-panes on"

# Dismiss current pane to background window
bind b break-pane -d
bind C-b send-keys 'tat && exit' 'C-m'
bind-key ! run-shell '(tmux switch-client -l || tmux switch-client -n) && tmux kill-session -t "#S" || tmux kill-session'
bind-key J command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

## switch to last pane
#bind-key C-a last-pane

# use different keys to split vertical and horizonal
bind-key \ split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"

bind c new-window -c "#{pane_current_path}"

# Easy resizing of panes with fine and coarse adjustment
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1
#bind -n C-Left resize-pane -L 10 #keybinding conflicts with OS desktop navigation
#bind -n C-Right resize-pane -R 10 #keybinding conflicts with OS desktop navigation
#bind -n C-Down resize-pane -D 5 #keybinding conflicts with OS desktop navigation
#bind -n C-Up resize-pane -U 5 #keybinding conflicts with OS desktop navigation

# Pane border
# set-option -g pane-border-fg colour235 #base02
# set-option -g pane-active-border-fg colour240 #base01
## clock
set-window-option -g clock-mode-colour green #green


###################
#
# Sessions
#
###################

# Make C-j display a selectable list of sessions
# bind C-j choose-tree
bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# Quick session switching back and forth. I never use the built in layouts
# (default mapping for Space), so I reclaimed the key for this
#bind-key Space switch-client -l #needs remapping to another key

# auto window rename
set-window-option -g automatic-rename on

# default window title colors
set-window-option -g window-status-fg colour244 #base0
set-window-option -g window-status-bg default
set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-fg colour166 #orange
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bright


###################
#
# Status bar
#
###################

# set -g status-interval 1
set -g status-justify centre # center align window list
set-option -g status-left-length 20
set-option -g status-right-length 80
set-option -g status-left '#[fg=green]#H #[fg=black]â€¢ #[fg=green,bright]#(uname -r | cut -c 1-6)#[default]'
set-option -g status-right '#[fg=green,bg=default,bright]#(tmux-mem-cpu-load -i 1) #[fg=red,dim,bg=default]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=white,bg=default]%a%l:%M:%S %p#[default] #[fg=blue]%d-%m-%Y'

# Simplify status bar display.
# set -g status-left '[#S]'
# set -g status-right "#{?pane_synchronized,--SYNCED--,} #(is-online) #(battery -t -g black)  #(date '+%a, %d %b - %H:%M') "

# Remove administrative debris (session name, hostname, time) in status bar
# set -g status-left ''
# set -g status-right ''

# Soften status bar color from harsh green to light gray
set -g status-bg '#666666'
set -g status-fg '#aaaaaa'

# Status bar message text
set-option -g message-bg colour235 #base02
set-option -g message-fg colour166 #orange

# status bar
# set-option -g status-utf8 on

# Activity monitoring
# setw -g monitor-activity on
# set -g visual-activity on








# set window split
#bind-key v split-window -h
#bind-key b split-window


# C-b is not acceptable -- Vim uses it
#set-option -g prefix C-a
#bind-key C-a last-window

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
#setw -g aggressive-resize on

## Allows us to use C-a a <command> to send commands to a TMUX session inside
## another TMUX session
#bind-key a send-prefix

#bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# Thyme (Pomodoro gem)
#set-option -g status-right '#(cat ~/.thyme-tmux)'
# set-option -g status-interval 1
